<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.bookstock">

	<resultMap id="book"
		type="com.basic.projectbook.vo.BookStockVO">
		<id property="no" column="no" />
		<result property="storeid" column="storeid" />
		<result property="qty" column="qty" />
		<result property="isbn" column="isbn" />
		<collection property="com.basic.projectbook.vo.BookVo" resultMap="book"></collection>
		<collection property="com.basic.projectbook.vo.StoreVO" resultMap="store"></collection>
		
	</resultMap>

	
	<insert id="bookStockDummy" parameterType="bookstock">
		insert into bookstock (storeid,isbn,qty)
		select s.storeid, b.isbn, 10 from store s, book b;
	</insert>
	 <select id="getAllBookStock" parameterType="bookstock" resultType="bookstock">
		SELECT storeid, isbn, SUM(qty) as qty FROM bookstock GROUP BY storeid, isbn;
	</select>
	
	
	
	
	<select id="deleteAllBookStock" parameterType="bookstock">
		delete from bookstock;
	</select>
	<select id="getBookStock" parameterType="String" resultType="bookstock">
		SELECT storeid, isbn, SUM(qty) as qty FROM bookstock where isbn=#{isbn} GROUP BY storeid ;
	</select>
	<insert id="addBookStock" parameterType="bookstock">
	insert into bookstock (storeid,isbn,qty) values(#{storeid},#{isbn},#{qty})
	</insert>
	<select id="getAllZeroStock()" parameterType="bookstock">
	SELECT DISTINCT b.title, b.isbn, b.author,b.publisher,s.storename, s.storeid  
FROM book AS b, store AS s
WHERE NOT EXISTS (
  SELECT *
  FROM bookstock AS bs
  WHERE bs.isbn = b.isbn AND bs.storeid = s.storeid
);
	</select>
	<delete id="deleteBook" parameterType="bookstock">
	delete from book where isbn=#{isbn}
	</delete>

</mapper>